#! /usr/bin/php
<?php

// 定义注册的应用名和对应使用的协议
$APP_NAMES = [
    'App'=>'http',
    'RpcService'=>'rpc',
    'UdpService'=> 'udp',
    'WebsockService'=>'websocket',
    'Pwa'=>'http'
];

// 定义环境
defined('SWOOLEFY_DEV') or define('SWOOLEFY_DEV','dev');
defined('SWOOLEFY_GRA') or define('SWOOLEFY_GRA','gra');
defined('SWOOLEFY_PRD') or define('SWOOLEFY_PRD','prd');
define('SWOOLEFY_ENVS', [
    SWOOLEFY_DEV,
    SWOOLEFY_GRA,
    SWOOLEFY_PRD
]);

// 设置成中国时区
date_default_timezone_set('PRC');

// score目录
if(is_dir(__DIR__.'/vendor/bingcool/swoolefy')) {
    $SCORE_DIR = __DIR__.'/vendor/bingcool/swoolefy';
}else {
    $SCORE_DIR = __DIR__;
}

// 定义一个全局常量
defined('SCORE_DIR_ROOT') or define('SCORE_DIR_ROOT', $SCORE_DIR);
// 启动文件目录
defined('START_DIR_ROOT') or define('START_DIR_ROOT', __DIR__);

// include composer的自动加载类完成命名空间的注册
include_once START_DIR_ROOT.'/vendor/autoload.php';

// include App应用层的自定义的自动加载类命名空间
if(isset($argv[2]) && in_array(trim($argv[2]), array_keys($APP_NAMES))) {
    $app_name = trim($argv[2]);
    defined('APP_NAME') or define('APP_NAME', $app_name);
    if(trim($argv[1]) != 'create') {
        $app_root_dir = START_DIR_ROOT."/{$app_name}";
        include_once $app_root_dir.'/autoloader.php';
    }
}else {
    write("[Error] app_name is not in APP_NAME array in swoolefy file, please check it");
    return;
}

// 判断当前环境,默认是dev(开发),gra(灰度),prd(生产)
$cli_params = array_flip($argv);
if(isset($cli_params['-'.SWOOLEFY_GRA])) {
    defined('SWOOLEFY_ENV') or define('SWOOLEFY_ENV', SWOOLEFY_GRA);
}
if(isset($cli_params['-'.SWOOLEFY_PRD])) {
    defined('SWOOLEFY_ENV') or define('SWOOLEFY_ENV', SWOOLEFY_PRD);
}else {
    defined('SWOOLEFY_ENV') or define('SWOOLEFY_ENV', SWOOLEFY_DEV);
}

function IS_DEV_ENV() {
    if(SWOOLEFY_ENV == SWOOLEFY_DEV) {
        return true;
    }
    return false;
}

function IS_GRA_ENV() {
    if(SWOOLEFY_ENV == SWOOLEFY_GRA) {
        return true;
    }
    return false;
}

function IS_PRD_ENV() {
    if(SWOOLEFY_ENV == SWOOLEFY_PRD) {
        return true;
    }
    return false;
}

function initCheck() {
    try{
       if(version_compare(phpversion(),'7.1.0','<')) {
            write("
                [error] php version must >= 7.1.0, current php version = ".phpversion()
            );
            exit();
        }
        if(version_compare(swoole_version(),'4.2.13','<')) {
            write("
                [error] the swoole version must >= 4.2.13, current swoole version = ".swoole_version()
            );
            exit();
        }
    }catch(Exception $e) {
        throw new Exception($e->getMessage(), 1);
    }
}

function opCacheClear(){
    if(function_exists('apc_clear_cache')){
        apc_clear_cache();
    }
    if(function_exists('opcache_reset')){
        opcache_reset();
    }
}

function commandParser() {
    global $argv;
    $command = isset($argv[1]) ? $argv[1] : null;
    $app_name = isset($argv[2]) ? $argv[2] : null;
    return ['command'=>$command, 'app_name'=>trim($app_name)];
}

function createProject($server_name) {
    $dirs = ['Config', 'Service'];
    $params = commandParser();
    $app_name = $params['app_name'];
    global $APP_NAMES;
    $app_root_dir = START_DIR_ROOT."/{$app_name}";
    if(is_dir($app_root_dir)) {
        write("You haved create {$app_name} project dir");
        exit();
    }

    $protocol = $APP_NAMES[$app_name];
    if(!$protocol) {
        write("[Error] app_name is not in APP_NAME array in swoolefy file, please check it");
        exit();
    }

    if($protocol == 'http') {
        $dirs = [
            'Config','Controller','Runtime','Log'
        ];
    }

    @mkdir($app_root_dir, 0777, true);
    foreach($dirs as $dir) {
        @mkdir($app_root_dir.'/'.$dir, 0777, true);
    }
}

function startServer($server_name) {
    opCacheClear();
    global $argv;
    global $APP_NAMES;
    $apps = $APP_NAMES;
    foreach($apps as $app_name => $protocol) {
        if($app_name == $server_name) {
            switch ($protocol) {
                case 'http':
                        startHttpService($app_name);
                    break;
                case 'websocket':
                        startWebsocket($app_name);
                    break;
                case 'rpc':
                        startRpc($app_name);
                    break;
                case 'udp':
                        startUdp($app_name);
                    break;
                default:
                    write("protocol is not in 【'http','websocket','rpc','udp'】");
                    break;
            }
        }
    }
    return ;
}

function startHttpService($app_name, $event_server_file_name = 'HttpServer') {
    $path = START_DIR_ROOT."/protocol/{$app_name}";
    if(!is_dir($path)) {
        @mkdir($path, 0777, true);
    }

    foreach(SWOOLEFY_ENVS as $env) {
        $config_file = $path."/config-{$env}.php";
        if(!file_exists($config_file)) {
            copy(SCORE_DIR_ROOT.'/score/Http/config.php', $config_file);
        }
    }

    $event_server_file = START_DIR_ROOT."/{$app_name}/{$event_server_file_name}.php";
    if(!file_exists($event_server_file)) {
        $search_str = "protocol\\http";
        $replace_str = "{$app_name}";
        $file_content_string = file_get_contents(SCORE_DIR_ROOT."/score/EventServer/{$event_server_file_name}.php");
        $count = 1;
        $file_content_string = str_replace($search_str, $replace_str, $file_content_string,$count);
        file_put_contents($event_server_file, $file_content_string);
    }

    $autoloader_file = START_DIR_ROOT."/{$app_name}/autoloader.php";
    if(!file_exists($autoloader_file)) {
        $autoloader_file_path = SCORE_DIR_ROOT."/autoloader.php";
        @copy($autoloader_file_path, $autoloader_file);
    }

    $config = include $path."/config-".SWOOLEFY_ENV.".php";

    if(isset($config['setting']['log_file'])) {
        $path = pathinfo($config['setting']['log_file'], PATHINFO_DIRNAME);
        if(!is_dir($path)) {
            mkdir($path, 0777, true);
        }
    }

    if(isDaemon()) {
        $config['setting']['daemonize'] = true;
    }
    if(!isset($config['app_conf'])) {
        write("Error:protocol/{$app_name}/config-".SWOOLEFY_ENV.".php"." must include app_conf file and set app_conf");
        exit();
    }
    setEnvParams($config);
    $class = "{$app_name}\\{$event_server_file_name}";
    $http = new $class($config);
    $http->start();
}

function startWebsocket($app_name, $event_server_file_name = 'WebsocketEventServer') {
    $path = START_DIR_ROOT."/protocol/{$app_name}";
    if(!is_dir($path)) {
        @mkdir($path, 0777, true);
    }

    foreach(SWOOLEFY_ENVS as $env) {
        $config_file = $path."/config-{$env}.php";
        if(!file_exists($config_file)) {
            copy(SCORE_DIR_ROOT.'/score/Websocket/config.php', $config_file);
        }
    }

    $event_server_file = START_DIR_ROOT."/{$app_name}/{$event_server_file_name}.php";
    if(!file_exists($event_server_file)) {
        $search_str = "protocol\\websocket";
        $replace_str = "{$app_name}";
        $file_content_string = file_get_contents(SCORE_DIR_ROOT."/score/EventServer/{$event_server_file_name}.php");
        $count = 1;
        $file_content_string = str_replace($search_str, $replace_str, $file_content_string,$count);
        file_put_contents($event_server_file, $file_content_string);
    }

    $autoloader_file = START_DIR_ROOT."/{$app_name}/autoloader.php";
    if(!file_exists($autoloader_file)) {
        $autoloader_file_path = SCORE_DIR_ROOT."/autoloader.php";
        @copy($autoloader_file_path, $autoloader_file);
    }

    $config = include $path."/config-".SWOOLEFY_ENV.".php";

    if(isset($config['setting']['log_file'])) {
        $path = pathinfo($config['setting']['log_file'], PATHINFO_DIRNAME);
        if(!is_dir($path)) {
            mkdir($path, 0777, true);
        }
    }

    if(isDaemon()) {
        $config['setting']['daemonize'] = true;
    }
    if(!isset($config['app_conf'])) {
        write("Error:protocol/{$app_name}/config-".SWOOLEFY_ENV.".php"." must include app_conf file and set app_conf");
        exit();
    }

    setEnvParams($config);

    $class = "{$app_name}\\{$event_server_file_name}";
    $websocket = new $class($config);
    $websocket->start();
}

function startRpc($app_name, $event_server_file_name = 'RpcServer') {
    $path = START_DIR_ROOT."/protocol/{$app_name}";
    if(!is_dir($path)) {
        @mkdir($path, 0777, true);
    }

    foreach(SWOOLEFY_ENVS as $env) {
        $config_file = $path."/config-{$env}.php";
        if(!file_exists($config_file)) {
            copy(SCORE_DIR_ROOT.'/score/Rpc/config.php', $config_file);
        }
    }

    $event_server_file = START_DIR_ROOT."/{$app_name}/{$event_server_file_name}.php";
    if(!file_exists($event_server_file)) {
        $search_str = "protocol\\rpc";
        $replace_str = "{$app_name}";
        $file_content_string = file_get_contents(SCORE_DIR_ROOT."/score/EventServer/{$event_server_file_name}.php");
        $count = 1;
        $file_content_string = str_replace($search_str, $replace_str, $file_content_string,$count);
        file_put_contents($event_server_file, $file_content_string);
    }

    $autoloader_file = START_DIR_ROOT."/{$app_name}/autoloader.php";
    if(!file_exists($autoloader_file)) {
        $autoloader_file_path = SCORE_DIR_ROOT."/autoloader.php";
        @copy($autoloader_file_path, $autoloader_file);
    }

    $config = include $path."/config-".SWOOLEFY_ENV.".php";

    if(isset($config['setting']['log_file'])) {
        $path = pathinfo($config['setting']['log_file'], PATHINFO_DIRNAME);
        if(!is_dir($path)) {
            mkdir($path, 0777, true);
        }
    }

    if(isDaemon()) {
        $config['setting']['daemonize'] = true;
    }
    if(!isset($config['app_conf'])) {
        write("Error:protocol/{$app_name}/config-".SWOOLEFY_ENV.".php"." must include app_conf file and set app_conf");
        exit();
    }

    setEnvParams($config);

    $class = "{$app_name}\\{$event_server_file_name}";
    $rpc = new $class($config);
    $rpc->start();
}

function startUdp($app_name, $event_server_file_name = 'UdpEventServer') {
    $path = START_DIR_ROOT."/protocol/{$app_name}";
    if(!is_dir($path)) {
        @mkdir($path, 0777, true);
    }

    foreach(SWOOLEFY_ENVS as $env) {
        $config_file = $path."/config-{$env}.php";
        if(!file_exists($config_file)) {
            copy(SCORE_DIR_ROOT.'/score/Udp/config.php', $config_file);
        }
    }

    $event_server_file = START_DIR_ROOT."/{$app_name}/{$event_server_file_name}.php";
    if(!file_exists($event_server_file)) {
        $search_str = "protocol\\udp";
        $replace_str = "{$app_name}";
        $file_content_string = file_get_contents(SCORE_DIR_ROOT."/score/EventServer/{$event_server_file_name}.php");
        $count = 1;
        $file_content_string = str_replace($search_str, $replace_str, $file_content_string,$count);
        file_put_contents($event_server_file, $file_content_string);
    }

    $autoloader_file = START_DIR_ROOT."/{$app_name}/autoloader.php";
    if(!file_exists($autoloader_file)) {
        $autoloader_file_path = SCORE_DIR_ROOT."/autoloader.php";
        @copy($autoloader_file_path, $autoloader_file);
    }

    $config = include $path."/config-".SWOOLEFY_ENV.".php";

    if(isset($config['setting']['log_file'])) {
        $path = pathinfo($config['setting']['log_file'], PATHINFO_DIRNAME);
        if(!is_dir($path)) {
            mkdir($path, 0777, true);
        }
    }

    if(isDaemon()) {
        $config['setting']['daemonize'] = true;
    }
    if(!isset($config['app_conf'])) {
        write("Error:protocol/{$app_name}/config-".SWOOLEFY_ENV.".php"." must include app_conf file and set app_conf");
        exit();
    }

    setEnvParams($config);

    $class = "{$app_name}\\{$event_server_file_name}";
    $udp = new $class($config);
    $udp->start();
}

function stopServer($app_name) {
    $path = START_DIR_ROOT."/protocol/{$app_name}";

    $config = include $path.'/config-'.SWOOLEFY_ENV.'.php';

    if(isset($config['setting']['pid_file'])) {
        $path = pathinfo($config['setting']['pid_file'], PATHINFO_DIRNAME);
        if(!is_dir($path)) {
            mkdir($path, 0777, true);
        }
    }

    $pid_file = $config['setting']['pid_file'];

    if(!is_file($pid_file)) {
        write("[error] pid file {$pid_file} is not exist, please check the server whether or not running");
        return;
    }

    $pid = intval(file_get_contents($pid_file));
    if(!\Swoole\Process::kill($pid, 0)){
        write("[error] pid={$pid} not exist");
        return;
    }

    // 发送信号，终止进程
    \Swoole\Process::kill($pid, SIGTERM);
    // 回收master创建的子进程（manager,worker,taskworker）
    \Swoole\Process::wait();

    // 如果'reload_async' => true,，则默认workerStop有30s的过度期停顿这个时间稍微会比较长，设置成60过期
    $nowtime = time();
    write("
        server begin to stopping at ".date("Y-m-d H:i:s").". please wait a moment..."
    );
    while(true) {
        sleep(1);
        if(!\Swoole\Process::kill($pid, 0)) {
            write("
        ---------------------stop info-------------------\n    
        server stop  successful. server stop at ".date("Y-m-d H:i:s")
            );
            @unlink($pid_file);
            break;
        }else {
            if(time() - $nowtime > 60){
                write("---------------------------stop info-----------------------");
                write("Please use 'ps -ef | grep php' checkout swoole whether or not stop");
                break;
            }
        }
    }
    \Swoole\Process::wait();
    exit();
}

function help($command) {
    switch(strtolower($command.'-'.'help')) {
        case 'start-help':{
            write("------------swoolefy启动服务命令------------",'light_green');
            write("1、执行php swoolefy start APP_NAME  其中APP_NAME是应用的名称",'light_green');
            write("2、执行php swoolefy start monitor configfile，例如php swoolefy start monitor config9502.php 即在当前终端启动monitor 监控文件自动重启worker服务",'light_green');
            write("3、执行php swoolefy start monitor configfile，例如php swoolefy start monitor config9502.php -d 即以守护进程启动monitor 监控文件自动重启worker服务",'light_green');
            echo "\n";
            break;
        }
        case 'stop-help':{
            write("------------swoolefy终止服务命令------------",'light_green');
            write("1、执行php swoolefy stop APP_NAME  其中APP_NAME是应用的名称",'light_green');
            write("2、执行php swoolefy stop monitor port，例如php swoolefy stop monitor 9502 即可终止monitor 监控文件自动重启worker服务",'light_green');
            echo "\n";
            break;
        }
        default:{
            write("------------欢迎使用swoolefy------------",'light_green');
            write("有关某个命令的详细信息，请键入 help 命令:",'light_green');
            write("1、php swoolefy start help 查看详细信息!",'light_green');
            write("2、php swoolefy stop help 查看详细信息!",'light_green');
        }
    }
}

function commandHandler(){
    $command = commandParser();
    if(isset($command['app_name']) && $command['app_name'] != 'help') {
        switch($command['command']){
            case 'create': {
                createProject($command['app_name']);
                break;
            }
            case "start":{
                startServer($command['app_name']);
                break;
            }
            case 'stop':{
                stopServer($command['app_name']);
                break;
            }
            case 'help':
            default:{
                help($command['command']);
            }
        }
    }else {
        help($command['command']);
    }
}

function write($msg, $foreground = "red", $background = "black") {
    // Create new Colors class
    static $colors;
    if(!isset($colors)) {
        $colors = new Colors();
    }
    echo $colors->getColoredString($msg, $foreground, $background) . "\n\n";
}

function setEnvParams($config) {
    global $argv;
    $params = array_flip($argv);
    if(isset($params['-h'])) {
        $h = $argv[$params['-h'] + 1];
        putenv("HOST_IP={$h}");
    }
    $port = $config['port'];
    putenv("HOST_POST={$port}");
}

function isDaemon() {
    global $argv;
    $params = array_flip($argv);
    if(isset($params['-d']) || isset($params['-D'])) {
        return true;
    }
    return false;
}


initCheck();
commandHandler();

class Colors {
    private $foreground_colors = array();
    private $background_colors = array();

    public function __construct() {
        // Set up shell colors
        $this->foreground_colors['black'] = '0;30';
        $this->foreground_colors['dark_gray'] = '1;30';
        $this->foreground_colors['blue'] = '0;34';
        $this->foreground_colors['light_blue'] = '1;34';
        $this->foreground_colors['green'] = '0;32';
        $this->foreground_colors['light_green'] = '1;32';
        $this->foreground_colors['cyan'] = '0;36';
        $this->foreground_colors['light_cyan'] = '1;36';
        $this->foreground_colors['red'] = '0;31';
        $this->foreground_colors['light_red'] = '1;31';
        $this->foreground_colors['purple'] = '0;35';
        $this->foreground_colors['light_purple'] = '1;35';
        $this->foreground_colors['brown'] = '0;33';
        $this->foreground_colors['yellow'] = '1;33';
        $this->foreground_colors['light_gray'] = '0;37';
        $this->foreground_colors['white'] = '1;37';

        $this->background_colors['black'] = '40';
        $this->background_colors['red'] = '41';
        $this->background_colors['green'] = '42';
        $this->background_colors['yellow'] = '43';
        $this->background_colors['blue'] = '44';
        $this->background_colors['magenta'] = '45';
        $this->background_colors['cyan'] = '46';
        $this->background_colors['light_gray'] = '47';
    }

    // Returns colored string
    public function getColoredString($string, $foreground_color = null, $background_color = null) {
        $colored_string = "";

        // Check if given foreground color found
        if (isset($this->foreground_colors[$foreground_color])) {
            $colored_string .= "\033[" . $this->foreground_colors[$foreground_color] . "m";
        }
        // Check if given background color found
        if (isset($this->background_colors[$background_color])) {
            $colored_string .= "\033[" . $this->background_colors[$background_color] . "m";
        }

        // Add string and end coloring
        $colored_string .=  $string . "\033[0m";

        return $colored_string;
    }

    // Returns all foreground color names
    public function getForegroundColors() {
        return array_keys($this->foreground_colors);
    }

    // Returns all background color names
    public function getBackgroundColors() {
        return array_keys($this->background_colors);
    }
}